import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.DDIS5Pnb.js";const c=JSON.parse('{"title":"Fetch in Guest System","description":"Information about the usage of fetch inside of the QuickJS runtime, security advices and best pratices","frontmatter":{"title":"Fetch in Guest System","description":"Information about the usage of fetch inside of the QuickJS runtime, security advices and best pratices","order":60},"headers":[],"relativePath":"docs/fetch.md","filePath":"docs/fetch.md","lastUpdated":1740591147000}'),n={name:"docs/fetch.md"};function l(h,s,p,d,o,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="fetch-in-guest-system" tabindex="-1">Fetch in Guest System <a class="header-anchor" href="#fetch-in-guest-system" aria-label="Permalink to &quot;Fetch in Guest System&quot;">​</a></h1><p>Allowing the guest system inside a sandbox to connect to the outside world is potentially risky. Therefore, the usage should be restricted as much as possible.</p><h2 id="consider-alternatives" tabindex="-1">Consider Alternatives <a class="header-anchor" href="#consider-alternatives" aria-label="Permalink to &quot;Consider Alternatives&quot;">​</a></h2><p>Balancing technical needs, possibilities, security, and implementation overhead highly depends on the individual application.</p><p>As general rules:</p><ul><li>If it can be restricted, it should be restricted.</li><li>If it can be avoided, it should be avoided.</li><li>If possible, the host system should have control and should only provide the needed information.</li><li>Consider runtime validation for inputs and outputs.</li></ul><p>A common example is calling an API. A better alternative is to create a helper function provided to the host instead of providing full fetch functionality to the guest system, especially in cases where the API is protected and/or the creator of the executed code is &quot;some user.&quot;</p><h3 id="simple-example" tabindex="-1">Simple Example <a class="header-anchor" href="#simple-example" aria-label="Permalink to &quot;Simple Example&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SandboxOptions, loadQuickJs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@sebastianwessel/quickjs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { z } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zod&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do not trust the client system - validate input</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://example.com/api/&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Secrets are only available on the host system</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      headers: { Authentication: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bearer MY_SECRET_ONLY_ON_HOST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result.ok) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Validate &amp; strip out any data that is not required</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> payloadValidationSchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myValue: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> payloadValidationSchema.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do not expose host internal details</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Request failed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runSandboxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadQuickJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SandboxOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  allowFetch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    getExternalData: getData,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">const fn = async ()=&gt;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  const data = await env.getExternalData(&#39;some-id&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  return data.myValue</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">export default await fn()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runSandboxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">evalCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> evalCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options), options)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span></code></pre></div><h2 id="default-adapter" tabindex="-1">Default Adapter <a class="header-anchor" href="#default-adapter" aria-label="Permalink to &quot;Default Adapter&quot;">​</a></h2><p>The default fetch adapter, which is provided by default, has basic default settings to improve security. However, developers should not expect this default client to be secure and cover all potential issues.</p><p>The <code>getDefaultFetchAdapter</code> function provides a customizable fetch adapter with additional features such as rate limiting, protocol and host restrictions, virtual file system support, timeout management, and CORS policy enforcement. This adapter can be used to enhance the security and control of fetch requests in various applications.</p><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><p>The <code>getDefaultFetchAdapter</code> function accepts an options object to configure its behavior. Below is a table describing the available options and their default values:</p><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td><code>fs</code></td><td><code>IFs</code></td><td>The virtual file system of the sandbox (excludes node_modules)</td><td><code>undefined</code></td></tr><tr><td><code>allowedHosts</code></td><td><code>string[]</code></td><td>List of allowed hosts. If set, only these hosts are allowed to call</td><td><code>undefined</code></td></tr><tr><td><code>allowedProtocols</code></td><td><code>string[]</code></td><td>List of allowed protocols. If set, only these protocols are allowed to call</td><td><code>[&#39;http:&#39;, &#39;https:&#39;]</code></td></tr><tr><td><code>disallowedHosts</code></td><td><code>string[]</code></td><td>List of disallowed hosts.</td><td><code>[&#39;localhost&#39;, &#39;127.0.0.1&#39;]</code></td></tr><tr><td><code>timeout</code></td><td><code>number</code></td><td>Timeout for fetch requests in milliseconds</td><td><code>5000</code> (5 seconds)</td></tr><tr><td><code>corsCheck</code></td><td><code>boolean</code></td><td>Flag to enable CORS policy check</td><td><code>false</code></td></tr><tr><td><code>allowedCorsOrigins</code></td><td><code>string[]</code></td><td>List of allowed CORS origins</td><td><code>[&#39;*&#39;]</code></td></tr><tr><td><code>rateLimitPoints</code></td><td><code>number</code></td><td>Number of requests allowed in the specified duration</td><td><code>10</code></td></tr><tr><td><code>rateLimitDuration</code></td><td><code>number</code></td><td>Duration in seconds for the rate limit</td><td><code>1</code></td></tr></tbody></table><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><h3 id="rate-limiting" tabindex="-1">Rate Limiting <a class="header-anchor" href="#rate-limiting" aria-label="Permalink to &quot;Rate Limiting&quot;">​</a></h3><p>The fetch adapter enforces rate limiting to control the number of requests allowed in a specified duration.</p><ul><li><strong>Options</strong>: <ul><li><code>rateLimitPoints</code>: Number of requests allowed.</li><li><code>rateLimitDuration</code>: Duration in seconds for the rate limit.</li></ul></li></ul><h3 id="protocol-and-host-restrictions" tabindex="-1">Protocol and Host Restrictions <a class="header-anchor" href="#protocol-and-host-restrictions" aria-label="Permalink to &quot;Protocol and Host Restrictions&quot;">​</a></h3><p>The fetch adapter can restrict requests based on allowed and disallowed hosts and protocols.</p><ul><li><strong>Options</strong>: <ul><li><code>allowedHosts</code>: List of allowed hosts.</li><li><code>disallowedHosts</code>: List of disallowed hosts.</li><li><code>allowedProtocols</code>: List of allowed protocols.</li></ul></li></ul><h3 id="timeout-management" tabindex="-1">Timeout Management <a class="header-anchor" href="#timeout-management" aria-label="Permalink to &quot;Timeout Management&quot;">​</a></h3><p>The fetch adapter supports setting a timeout for fetch requests to prevent long-running requests.</p><ul><li><strong>Options</strong>: <ul><li><code>timeout</code>: Timeout for fetch requests in milliseconds.</li></ul></li></ul><h3 id="cors-policy-enforcement" tabindex="-1">CORS Policy Enforcement <a class="header-anchor" href="#cors-policy-enforcement" aria-label="Permalink to &quot;CORS Policy Enforcement&quot;">​</a></h3><p>The fetch adapter can enforce CORS policies based on allowed origins.</p><ul><li><strong>Options</strong>: <ul><li><code>corsCheck</code>: Flag to enable CORS policy check.</li><li><code>allowedCorsOrigins</code>: List of allowed CORS origins.</li></ul></li></ul><h3 id="virtual-file-system-support" tabindex="-1">Virtual File System Support <a class="header-anchor" href="#virtual-file-system-support" aria-label="Permalink to &quot;Virtual File System Support&quot;">​</a></h3><p>The fetch adapter can work with a virtual file system to handle file protocol requests.</p><ul><li><strong>Options</strong>: <ul><li><code>fs</code>: The virtual file system of the sandbox.</li></ul></li></ul>`,31)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
