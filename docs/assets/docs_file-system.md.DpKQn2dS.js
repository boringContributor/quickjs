import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.CAeRsQAW.js";const m=JSON.parse('{"title":"File System","description":"Learn, how you can create and mount your own virtual file system into the QuickJS runtime","frontmatter":{"title":"File System","description":"Learn, how you can create and mount your own virtual file system into the QuickJS runtime","order":50},"headers":[],"relativePath":"docs/file-system.md","filePath":"docs/file-system.md","lastUpdated":1740691858000}'),o={name:"docs/file-system.md"};function n(l,e,r,d,p,h){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="custom-file-system" tabindex="-1">Custom File System <a class="header-anchor" href="#custom-file-system" aria-label="Permalink to “Custom File System”">​</a></h1><p>Every QuickJS sandbox has its own virtual file system. The file system is based on <a href="https://github.com/streamich/memfs" target="_blank" rel="noreferrer">memfs</a>. It holds the <code>node_modules</code> and allows for the inclusion of custom files in the script running in the QuickJS sandbox.</p><p>For detailed information on providing a custom node module, please refer to the documentation: <a href="./module-resolution/custom-modules.html">Custom Node Modules</a>.</p><p>The code provided to the <code>evalCode</code> function is treated as file <code>src/index.js</code>. This means when you use relative files, they are relative to <code>src/index.js</code>.</p><h2 id="providing-files" tabindex="-1">Providing Files <a class="header-anchor" href="#providing-files" aria-label="Permalink to “Providing Files”">​</a></h2><p>To provide a custom file system, a nested structure is used. The structure is mounted below <code>/</code>.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to “Example”">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SandboxOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mountFs: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    src: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;custom.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`export const relativeImportFunction = ()=&gt;&#39;Hello from relative import function&#39;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;fileInRoot.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Some text content&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>In this example, a JavaScript file is added to the virtual file system at <code>/src/custom.js</code>, and a text file is added to the root <code>/fileInRoot.txt</code>.</p><h2 id="importing-files" tabindex="-1">Importing Files <a class="header-anchor" href="#importing-files" aria-label="Permalink to “Importing Files”">​</a></h2><p>JavaScript files can be imported as usual. Importing files is possible even if the <a href="./runtime-options.html">runtime option</a> <code>allowFs</code> is set to <code>false</code>. This option only refers to the functions and methods of the <code>fs</code> package. Regular js imports are not effected.</p><p>This means, the provided js file from the example above, can be used like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { customFn } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./custom.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [...]</span></span></code></pre></div><h2 id="direct-file-access" tabindex="-1">Direct File Access <a class="header-anchor" href="#direct-file-access" aria-label="Permalink to “Direct File Access”">​</a></h2><p>To use file handling methods from <code>node:fs</code>, the <a href="./runtime-options.html">runtime option</a> <code>allowFs</code> must be set to <code>true</code>. If <code>allowFs</code> is not enabled, every method from <code>node:fs</code> will throw an error. For security reasons, the <code>allowFs</code> option is set to <code>false</code> by default.</p><p>Currently, only basic file operations on text files are supported. For more information, see <a href="./module-resolution/node-compatibility.html">Node compatibility - node:fs</a>.</p>`,16)]))}const k=s(o,[["render",n]]);export{m as __pageData,k as default};
