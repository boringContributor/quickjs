import{_ as i,c as a,o as t,a2 as n}from"./chunks/framework.CAeRsQAW.js";const c=JSON.parse('{"title":"Runtime Options","description":"The QuickJS sandbox provides a wide range of options to align the runtime to your needs","frontmatter":{"title":"Runtime Options","description":"The QuickJS sandbox provides a wide range of options to align the runtime to your needs","order":40},"headers":[],"relativePath":"docs/runtime-options.md","filePath":"docs/runtime-options.md","lastUpdated":1741470167000}'),e={name:"docs/runtime-options.md"};function h(l,s,d,p,o,k){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="quickjs-sandbox-options" tabindex="-1">QuickJS Sandbox Options <a class="header-anchor" href="#quickjs-sandbox-options" aria-label="Permalink to ‚ÄúQuickJS Sandbox Options‚Äù">‚Äã</a></h1><p>The <strong>QuickJS Sandbox</strong> provides a secure, configurable environment for executing JavaScript and TypeScript code. The sandbox supports both <strong>synchronous</strong> and <strong>asynchronous</strong> WebAssembly execution, with various options for resource limits, virtual file systems, networking, logging, and more.</p><h2 id="‚öôÔ∏è-base-options" tabindex="-1">‚öôÔ∏è Base Options <a class="header-anchor" href="#‚öôÔ∏è-base-options" aria-label="Permalink to ‚Äú‚öôÔ∏è Base Options‚Äù">‚Äã</a></h2><p>These options apply to both synchronous and asynchronous sandbox instances.</p><h3 id="‚è≥-execution-limits" tabindex="-1">‚è≥ Execution Limits <a class="header-anchor" href="#‚è≥-execution-limits" aria-label="Permalink to ‚Äú‚è≥ Execution Limits‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>executionTimeout</code></td><td><code>number</code></td><td>Maximum script execution time (in milliseconds). Set to <code>0</code> for unlimited.</td></tr><tr><td><code>maxStackSize</code></td><td><code>number</code></td><td>Maximum stack size (in bytes). Set to <code>0</code> to disable the limit.</td></tr><tr><td><code>memoryLimit</code></td><td><code>number</code></td><td>Maximum memory allocation. Set to <code>0</code> to remove the limit.</td></tr></tbody></table><h3 id="üìÇ-virtual-file-system" tabindex="-1">üìÇ Virtual File System <a class="header-anchor" href="#üìÇ-virtual-file-system" aria-label="Permalink to ‚ÄúüìÇ Virtual File System‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>mountFs</code></td><td>\`NestedDirectoryJSON</td><td>IFs\`</td></tr><tr><td><code>nodeModules</code></td><td><code>NestedDirectoryJSON</code></td><td>Mounts custom <code>node_modules</code> in the virtual file system.</td></tr></tbody></table><h3 id="üìÑ-file-system-access" tabindex="-1">üìÑ File System Access <a class="header-anchor" href="#üìÑ-file-system-access" aria-label="Permalink to ‚ÄúüìÑ File System Access‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>allowFs</code></td><td><code>boolean</code></td><td>Enables file system access (<code>node:fs</code>).</td></tr></tbody></table><h3 id="üåê-networking" tabindex="-1">üåê Networking <a class="header-anchor" href="#üåê-networking" aria-label="Permalink to ‚Äúüåê Networking‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>allowFetch</code></td><td><code>boolean</code></td><td>Enables <code>fetch</code> for making HTTP(S) calls.</td></tr><tr><td><code>fetchAdapter</code></td><td><code>typeof fetch</code></td><td>Custom fetch adapter provided as a host function.</td></tr></tbody></table><h3 id="üõ†Ô∏è-testing-utilities" tabindex="-1">üõ†Ô∏è Testing Utilities <a class="header-anchor" href="#üõ†Ô∏è-testing-utilities" aria-label="Permalink to ‚Äúüõ†Ô∏è Testing Utilities‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>enableTestUtils</code></td><td><code>boolean</code></td><td>Enables test frameworks (<code>chai</code> &amp; <code>mocha</code>).</td></tr></tbody></table><h3 id="üì¢-console-customization" tabindex="-1">üì¢ Console Customization <a class="header-anchor" href="#üì¢-console-customization" aria-label="Permalink to ‚Äúüì¢ Console Customization‚Äù">‚Äã</a></h3><p>You can override console methods for custom logging behavior.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  warn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  debug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="üõë-environment-syncing" tabindex="-1">üõë Environment &amp; Syncing <a class="header-anchor" href="#üõë-environment-syncing" aria-label="Permalink to ‚Äúüõë Environment &amp; Syncing‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>env</code></td><td><code>Record&lt;string, unknown&gt;</code></td><td>Defines environment variables available inside QuickJS.</td></tr><tr><td><code>dangerousSync</code></td><td><code>Record&lt;string, unknown&gt;</code></td><td>Syncs data between host &amp; guest (‚ö†Ô∏è can be modified by guest).</td></tr></tbody></table><h3 id="üìù-typescript-support" tabindex="-1">üìù TypeScript Support <a class="header-anchor" href="#üìù-typescript-support" aria-label="Permalink to ‚Äúüìù TypeScript Support‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>typescriptImportFile</code></td><td><code>string</code></td><td>TypeScript library to import (default: <code>typescript</code>).</td></tr><tr><td><code>transformTypescript</code></td><td><code>boolean</code></td><td>Transpiles TypeScript files to JavaScript in <code>mountFs</code>.</td></tr><tr><td><code>transformCompilerOptions</code></td><td><code>TS.CompilerOptions</code></td><td>TypeScript compiler options.</td></tr></tbody></table><h3 id="‚è≤Ô∏è-timer-limits" tabindex="-1">‚è≤Ô∏è Timer Limits <a class="header-anchor" href="#‚è≤Ô∏è-timer-limits" aria-label="Permalink to ‚Äú‚è≤Ô∏è Timer Limits‚Äù">‚Äã</a></h3><p>To prevent abuse, the number of running <code>setTimeout</code> and <code>setInterval</code> calls is restricted.</p><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>maxTimeoutCount</code></td><td><code>number</code></td><td>Max concurrent timeouts (default: <code>100</code>).</td></tr><tr><td><code>maxIntervalCount</code></td><td><code>number</code></td><td>Max concurrent intervals (default: <code>100</code>).</td></tr></tbody></table><hr><h2 id="üèóÔ∏è-module-handling" tabindex="-1">üèóÔ∏è Module Handling <a class="header-anchor" href="#üèóÔ∏è-module-handling" aria-label="Permalink to ‚ÄúüèóÔ∏è Module Handling‚Äù">‚Äã</a></h2><p>Both <strong>synchronous</strong> and <strong>asynchronous</strong> QuickJS sandboxes allow customizing module loading.</p><h3 id="üì¶-synchronous-module-options-sandboxoptions" tabindex="-1">üì¶ Synchronous Module Options (<code>SandboxOptions</code>) <a class="header-anchor" href="#üì¶-synchronous-module-options-sandboxoptions" aria-label="Permalink to ‚Äúüì¶ Synchronous Module Options (SandboxOptions)‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>getModuleLoader</code></td><td><code>(fs: IFs, options: RuntimeOptions) =&gt; JSModuleLoader</code></td><td>Custom module loader.</td></tr><tr><td><code>modulePathNormalizer</code></td><td><code>JSModuleNormalizer</code></td><td>Transforms module paths before loading.</td></tr></tbody></table><h3 id="üåç-asynchronous-module-options-sandboxasyncoptions" tabindex="-1">üåç Asynchronous Module Options (<code>SandboxAsyncOptions</code>) <a class="header-anchor" href="#üåç-asynchronous-module-options-sandboxasyncoptions" aria-label="Permalink to ‚Äúüåç Asynchronous Module Options (SandboxAsyncOptions)‚Äù">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>getModuleLoader</code></td><td><code>(fs: IFs, options: RuntimeOptions) =&gt; JSModuleLoaderAsync</code></td><td>Custom module loader.</td></tr><tr><td><code>modulePathNormalizer</code></td><td><code>JSModuleNormalizerAsync</code></td><td>Transforms module paths before loading.</td></tr></tbody></table><p>üîó <strong>More info:</strong> See <a href="https://github.com/justjake/quickjs-emscripten?tab=readme-ov-file#asyncify" target="_blank" rel="noreferrer">github.com/justjake/quickjs-emscripten</a> for details on asynchronous execution.</p><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to ‚ÄúExample Usage‚Äù">‚Äã</a></h2><p>The options are passed to the <code>createRuntime</code> method. Here is a basic example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SandboxOptions, loadQuickJs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@sebastianwessel/quickjs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runSandboxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadQuickJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a runtime instance each time a JS code should be executed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SandboxOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  allowFetch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// inject fetch and allow the code to fetch data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  allowFs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mount a virtual file system and provide node:fs module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MY_ENV_VAR: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;env var value&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">optionalParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[QuickJS Log]: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">optionalParams);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">optionalParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[QuickJS Error]: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">optionalParams);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Customize other console methods as needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import { join } as path from &#39;path&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">const fn = async () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  console.log(join(&#39;src&#39;, &#39;dist&#39;)); // logs &quot;src/dist&quot; on host system</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  console.log(env.MY_ENV_VAR); // logs &quot;env var value&quot; on host system</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  const url = new URL(&#39;https://example.com&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  const f = await fetch(url);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  return f.text();</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">export default await fn();</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runSandboxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">evalCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> evalCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code), options)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { ok: true, data: &#39;&lt;!doctype html&gt;\\n&lt;html&gt;\\n[....]&lt;/html&gt;\\n&#39; }</span></span></code></pre></div>`,35)]))}const E=i(e,[["render",h]]);export{c as __pageData,E as default};
