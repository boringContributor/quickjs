import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.DDIS5Pnb.js";const g=JSON.parse('{"title":"Path Normalizer","description":"Learn how to figure out the real location of a requested import file","frontmatter":{"title":"Path Normalizer","description":"Learn how to figure out the real location of a requested import file","order":4010},"headers":[],"relativePath":"docs/module-resolution/path-normalizer.md","filePath":"docs/module-resolution/path-normalizer.md","lastUpdated":1740693259000}'),e={name:"docs/module-resolution/path-normalizer.md"};function l(h,s,p,r,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="understanding-path-normalization-in-quickjs" tabindex="-1">Understanding Path Normalization in QuickJS <a class="header-anchor" href="#understanding-path-normalization-in-quickjs" aria-label="Permalink to &quot;Understanding Path Normalization in QuickJS&quot;">‚Äã</a></h1><p>When working with <strong>QuickJS</strong>, one of the most crucial components in the sandbox environment is the <strong>Path Normalizer</strong>.</p><p>Path normalization plays a key role in <strong>resolving module imports</strong>, ensuring that dependencies are correctly loaded‚Äîwhether they are <strong>local files, remote dependencies, or Node.js modules</strong>.</p><p>In this article, we‚Äôll explore:</p><p>‚úÖ <strong>What path normalization is</strong><br> ‚úÖ <strong>Why it‚Äôs important in QuickJS</strong><br> ‚úÖ <strong>How to implement a custom path normalizer</strong></p><h2 id="üèóÔ∏è-what-is-path-normalization" tabindex="-1">üèóÔ∏è What is Path Normalization? <a class="header-anchor" href="#üèóÔ∏è-what-is-path-normalization" aria-label="Permalink to &quot;üèóÔ∏è What is Path Normalization?&quot;">‚Äã</a></h2><p>In JavaScript, <strong>modules are imported using file paths</strong>, such as:</p><ul><li><strong>Relative paths</strong> (<code>./module.js</code>, <code>../utils.js</code>)</li><li><strong>Absolute paths</strong> (<code>/src/module.js</code>)</li><li><strong>Node.js built-in modules</strong> (<code>node:path</code>, <code>node:fs</code>)</li><li><strong>Remote URLs</strong> (e.g., <code>https://esm.sh/react</code>)</li></ul><p>However, in a <strong>sandboxed environment like QuickJS</strong>, module imports <strong>must be carefully managed</strong> because:<br> 1Ô∏è‚É£ <strong>There is no direct file system access.</strong><br> 2Ô∏è‚É£ <strong>Modules might come from different sources (local, remote, or Node core).</strong><br> 3Ô∏è‚É£ <strong>QuickJS does not automatically resolve paths like Node.js does.</strong></p><p>A <strong>Path Normalizer</strong> is responsible for <strong>mapping the requested module path</strong> to the correct <strong>source location</strong>, ensuring that imports work correctly.</p><h2 id="‚öôÔ∏è-implementing-a-path-normalizer-in-quickjs" tabindex="-1">‚öôÔ∏è Implementing a Path Normalizer in QuickJS <a class="header-anchor" href="#‚öôÔ∏è-implementing-a-path-normalizer-in-quickjs" aria-label="Permalink to &quot;‚öôÔ∏è Implementing a Path Normalizer in QuickJS&quot;">‚Äã</a></h2><p>To handle different types of imports, we need to <strong>intercept the import statements</strong> and transform paths accordingly.</p><p>Let‚Äôs break this down step by step.</p><h3 id="üìù-basic-rules-for-path-normalization" tabindex="-1">üìù <strong>Basic Rules for Path Normalization</strong> <a class="header-anchor" href="#üìù-basic-rules-for-path-normalization" aria-label="Permalink to &quot;üìù **Basic Rules for Path Normalization**&quot;">‚Äã</a></h3><table tabindex="0"><thead><tr><th>Type of Import</th><th>Transformation</th></tr></thead><tbody><tr><td><strong>Remote URL (esm.sh)</strong></td><td>Convert <code>esm.sh/react</code> ‚Üí <code>https://esm.sh/react</code></td></tr><tr><td><strong>Node.js Modules</strong></td><td>Convert <code>node:path</code> ‚Üí <code>/node_modules/path</code></td></tr><tr><td><strong>Relative Imports (Local)</strong></td><td>Convert <code>./module.js</code> ‚Üí Absolute path in virtual FS</td></tr><tr><td><strong>Relative Imports (esm.sh)</strong></td><td>Convert <code>/submodule</code> inside an esm.sh module to full URL</td></tr></tbody></table><h3 id="üîπ-custom-path-normalizer-implementation" tabindex="-1">üîπ <strong>Custom Path Normalizer Implementation</strong> <a class="header-anchor" href="#üîπ-custom-path-normalizer-implementation" aria-label="Permalink to &quot;üîπ **Custom Path Normalizer Implementation**&quot;">‚Äã</a></h3><p>The following <strong>path normalizer function</strong> ensures that all imports are properly mapped:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modulePathNormalizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">baseName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">requestedName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Import from esm.sh</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (requestedName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;esm.sh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`https://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">requestedName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (requestedName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://esm.sh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requestedName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Import within an esm.sh module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (requestedName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`https://esm.sh\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">requestedName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Handle relative imports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (requestedName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // If base is an esm.sh module, resolve the full URL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (baseName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://esm.sh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(requestedName, baseName).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Resolve relative paths for local imports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parts.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, requestedName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Normalize Node.js module imports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moduleName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requestedName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, moduleName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="üîÑ-using-the-path-normalizer-in-a-quickjs-sandbox" tabindex="-1">üîÑ Using the Path Normalizer in a QuickJS Sandbox <a class="header-anchor" href="#üîÑ-using-the-path-normalizer-in-a-quickjs-sandbox" aria-label="Permalink to &quot;üîÑ Using the Path Normalizer in a QuickJS Sandbox&quot;">‚Äã</a></h2><p>Once we have our <strong>path normalizer</strong>, we need to <strong>integrate it into our QuickJS execution environment</strong>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SandboxAsyncOptions, loadAsyncQuickJs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@sebastianwessel/quickjs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runSandboxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadAsyncQuickJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SandboxAsyncOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modulePathNormalizer,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">import * as React from &#39;esm.sh/react@15&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">export default React.createElement(&#39;div&#39;, null, &#39;Hello, QuickJS!&#39;)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runSandboxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">evalCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> evalCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code), options)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: &quot;&lt;div&gt;Hello, QuickJS!&lt;/div&gt;&quot;</span></span></code></pre></div><p>‚úÖ <strong>All imports are automatically resolved</strong> by our <strong>Path Normalizer</strong>.</p><h2 id="üõ†Ô∏è-enhancing-the-path-normalizer" tabindex="-1">üõ†Ô∏è Enhancing the Path Normalizer <a class="header-anchor" href="#üõ†Ô∏è-enhancing-the-path-normalizer" aria-label="Permalink to &quot;üõ†Ô∏è Enhancing the Path Normalizer&quot;">‚Äã</a></h2><p>While the current implementation covers <strong>basic scenarios</strong>, we can further enhance it by:</p><p>1Ô∏è‚É£ <strong>Caching resolved paths</strong> to improve performance.<br> 2Ô∏è‚É£ <strong>Handling multiple CDN sources (e.g., skypack, jsdelivr).</strong><br> 3Ô∏è‚É£ <strong>Restricting certain imports</strong> for security reasons.<br> 4Ô∏è‚É£ <strong>Adding logging/debugging for better visibility.</strong></p><p>Example <strong>logging enhancement</strong>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Resolving module: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">requestedName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} ‚Üí \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">normalizedPath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="üéØ-key-takeaways" tabindex="-1">üéØ Key Takeaways <a class="header-anchor" href="#üéØ-key-takeaways" aria-label="Permalink to &quot;üéØ Key Takeaways&quot;">‚Äã</a></h2><p>‚úÖ <strong>Path normalization ensures correct module resolution in QuickJS.</strong><br> ‚úÖ <strong>It allows seamless integration of remote and local dependencies.</strong><br> ‚úÖ <strong>A well-designed normalizer enhances security and performance.</strong></p><p>By implementing <strong>a robust path normalizer</strong>, we can enable <strong>smooth and safe execution of JavaScript modules</strong> within a <strong>QuickJS sandboxed environment</strong>.</p>`,30)]))}const E=i(e,[["render",l]]);export{g as __pageData,E as default};
